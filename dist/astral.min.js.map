{"version":3,"file":"astral.min.js","mappings":"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","sources":["webpack://Astral/webpack/universalModuleDefinition","webpack://Astral/webpack/bootstrap","webpack://Astral/./src/event.ts","webpack://Astral/webpack/runtime/define property getters","webpack://Astral/webpack/runtime/hasOwnProperty shorthand","webpack://Astral/webpack/runtime/make namespace object","webpack://Astral/./src/layout.ts","webpack://Astral/./src/context.ts","webpack://Astral/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Astral\"] = factory();\n\telse\n\t\troot[\"Astral\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","/**\n * @namespace Astral.event\n * @desc Event handling\n * @memberof! Astral\n * @public\n * @example Astral.event.subscribe('eventName', function(data){ console.log(data) });\n * @example Astral.event.publish('eventName', {foo: 'bar'});\n * @example Astral.event.unsubscribe('eventName', callback);\n * @example Astral.event.unsubscribeAll('eventName');\n * @example Astral.event.setDebugMode(true);\n * @example Astral.event.setDebugMode(false);\n */\nvar Astral;\n(function (Astral) {\n    var event;\n    (function (event) {\n        const _eventSubscribers = {};\n        let _debugMode = false;\n        function _removeFromArray(array, element) {\n            const index = array.indexOf(element);\n            if (index > -1)\n                array.splice(index, 1);\n        }\n        function _debugLog(msg) {\n            if (_debugMode)\n                console.debug('Astral.event $:', msg);\n        }\n        // public methods\n        /**\n         * Subscribe to an event\n         * @param {String} eventName Name of the event to listen to\n         * @param {Function} callback Function to trigger upon event\n         * @memberof! Astral.event\n         * @returns {void}\n         * @public\n         * @example Astral.event.subscribe('eventName', function(data){ console.log(data) });\n         */\n        function subscribe(eventName, callback) {\n            if (!Array.isArray(_eventSubscribers[eventName])) {\n                _eventSubscribers[eventName] = [];\n                _debugLog(`Event: ${eventName} subscribers list initialized`);\n            }\n            if (_eventSubscribers[eventName].indexOf(callback) === -1) {\n                _eventSubscribers[eventName].push(callback);\n                _debugLog(`Event: ${eventName}\\nCallback: ${callback}\\nAction: callback added (subscribed)`);\n            }\n        }\n        event.subscribe = subscribe;\n        /**\n         * Publish an event to trigger subscribed callbacks\n         * @param {String} eventName Name of the event to publish\n         * @param {*} data Data to be passed to the event's callbacks.\n         * @returns {void}\n         * @memberof! Astral.event\n         * @public\n         * @example Astral.event.publish('eventName', {foo: 'bar'});\n         * @example Astral.event.publish('eventName', 'foo');\n         */\n        function publish(eventName, data) {\n            if (!Array.isArray(_eventSubscribers[eventName])) {\n                _debugLog(`Event: ${eventName}\\nData: ${JSON.stringify(data)}\\nAction: No subscribers found`);\n                return;\n            }\n            _eventSubscribers[eventName].forEach(function (callback) {\n                callback(data);\n                _debugLog(`Event: ${eventName}\\nData: ${JSON.stringify(data)}\\nCallback: ${callback}\\nAction: callback executed`);\n            });\n        }\n        event.publish = publish;\n        /**\n         * Remove an event subscription\n         * @param {String} eventName Event Name\n         * @param {Function} callback Function to remove\n         * @memberof! Astral.event\n         * @returns {void}\n         * @public\n         * @example Astral.event.unsubscribe('eventName', callback);\n         */\n        function unsubscribe(eventName, callback) {\n            if (!Array.isArray(_eventSubscribers[eventName])) {\n                _debugLog(`Event: ${eventName}\\nNo subscribers found to unsubscribe`);\n                return;\n            }\n            for (let i = 0; i < _eventSubscribers[eventName].length; i++) {\n                if (_eventSubscribers[eventName][i] === callback)\n                    _removeFromArray(_eventSubscribers[eventName], callback);\n            }\n            _debugLog(`Event: ${eventName}\\nCallback: ${callback}\\nAction: callback removed (unsubscribed)`);\n        }\n        event.unsubscribe = unsubscribe;\n        /**\n         * Remove all events from a subscription\n         * @param {String} eventName Event Name\n         * @memberof! Astral.event\n         * @returns {void}\n         * @public\n         * @example Astral.event.unsubscribeAll('eventName');\n         */\n        function unsubscribeAll(eventName) {\n            if (!Array.isArray(_eventSubscribers[eventName])) {\n                for (const key in _eventSubscribers) {\n                    _removeFromArray(_eventSubscribers[key], _eventSubscribers[key]);\n                }\n                _debugLog('Removed all subscriptions because no event name was given to unsubscribeAll function');\n                return;\n            }\n            for (let i = 0; i < _eventSubscribers[eventName].length; i++) {\n                _removeFromArray(_eventSubscribers[eventName], _eventSubscribers[eventName][i]);\n            }\n            _debugLog(`Event: ${eventName}\\nAction: All callbacks removed (unsubscribed)`);\n        }\n        event.unsubscribeAll = unsubscribeAll;\n        /**\n         * @desc Set debug mode\n         * @memberof! Astral.event\n         * @param {Boolean} debugMode\n         * @returns {void}\n         * @public\n         * @name setDebugMode\n         * @example Astral.event.setDebugMode(true);\n         * @example Astral.event.setDebugMode(false);\n         */\n        function setDebugMode(debugMode) {\n            _debugMode = debugMode;\n            _debugLog('Debug mode set to: ' + debugMode);\n        }\n        event.setDebugMode = setDebugMode;\n    })(event = Astral.event || (Astral.event = {}));\n})(Astral || (Astral = {}));\nexport default Astral.event;\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import Event from './event';\nvar Astral;\n(function (Astral) {\n    var layout;\n    (function (layout) {\n        const DEFAULT_BREAKPOINT_LABELS = {\n            ExtraLarge: 'ExtraLarge',\n            Large: 'Large',\n            Medium: 'Medium',\n            Small: 'Small',\n            ExtraSmall: 'ExtraSmall',\n            Other: 'Other',\n        };\n        const DEFAULT_BREAKPOINTS = {\n            [DEFAULT_BREAKPOINT_LABELS.ExtraLarge]: {\n                minWidth: 1920,\n                maxWidth: Infinity,\n                minHeight: 840,\n            },\n            [DEFAULT_BREAKPOINT_LABELS.Large]: {\n                minWidth: 1280,\n                maxWidth: 1920,\n                minHeight: 646,\n            },\n            [DEFAULT_BREAKPOINT_LABELS.Medium]: {\n                minWidth: 960,\n                maxWidth: 1280,\n                minHeight: 380,\n            },\n            [DEFAULT_BREAKPOINT_LABELS.Small]: {\n                minWidth: 600,\n                maxWidth: 960,\n                minHeight: 0,\n            },\n            [DEFAULT_BREAKPOINT_LABELS.ExtraSmall]: {\n                minWidth: 0,\n                maxWidth: 600,\n                minHeight: 0,\n            },\n            [DEFAULT_BREAKPOINT_LABELS.Other]: {\n                minWidth: 600,\n                maxWidth: Infinity,\n                minHeight: 0,\n            },\n        };\n        const DEFAULT_CONFIG = {\n            breakpoints: DEFAULT_BREAKPOINTS,\n        };\n        let configuration = DEFAULT_CONFIG;\n        let breakpointLabels = DEFAULT_BREAKPOINT_LABELS;\n        const ASTRAL_LAYOUT_EVENTS = {\n            SCREEN_RESIZE: 'astralInternalScreenResizeEvent',\n            ORIENTATION_CHANGE: 'astralInternalOrientationChangeEvent',\n        };\n        let debugMode = false;\n        /** Private Functions */\n        (function _setupResizeEvents() {\n            window.addEventListener('resize', _publishResizeEvents);\n            if (window.screen && window.screen.orientation) {\n                window.screen.orientation.addEventListener('change', function () {\n                    _publishOrientationChangeEvents();\n                });\n            }\n            else if (window.matchMedia) {\n                /**\n                 * Handle outdated browsers, especially iOS Safari\n                 * The following code is outdated, and deprecated in most modern browsers\n                 * but is need to handle ios side of things regarding window orientation change.\n                 * mql = media query language\n                 */\n                const mql = window.matchMedia('(orientation: portrait)');\n                _publishOrientationChangeEvents();\n                mql.addListener(function () {\n                    _publishOrientationChangeEvents();\n                });\n            }\n        })();\n        function _publishResizeEvents() {\n            Event.publish(ASTRAL_LAYOUT_EVENTS.SCREEN_RESIZE, getBreakpoint(getWindowSize()));\n        }\n        function _publishOrientationChangeEvents() {\n            const orientation = getOrientation();\n            Event.publish(ASTRAL_LAYOUT_EVENTS.ORIENTATION_CHANGE, orientation);\n        }\n        function _resizeCallback(callback) {\n            Event.subscribe(ASTRAL_LAYOUT_EVENTS.SCREEN_RESIZE, callback);\n            _publishResizeEvents();\n        }\n        function _orientationChangeCallback(callback) {\n            Event.subscribe(ASTRAL_LAYOUT_EVENTS.ORIENTATION_CHANGE, callback);\n            _publishOrientationChangeEvents();\n        }\n        function _debugLog(message) {\n            if (debugMode)\n                console.debug(`Astral.layout $: ${message}`);\n        }\n        /** Public Functions */\n        /**\n         * Configure Astral layout module\n         * @param {Config} newConfig New configuration\n         * @memberof! Astral.layout\n         * @public\n         * @example Astral.layout.config({ breakpoints: { extraLarge: { minWidth: 1920, maxWidth: Infinity, minHeight: 840, }, large: { minWidth: 1280, maxWidth: 1920, minHeight: 646, }, medium: { minWidth: 960, maxWidth: 1280, minHeight: 380, }, small: { minWidth: 600, maxWidth: 960, minHeight: 0, }, extraSmall: { minWidth: 0, maxWidth: 600, minHeight: 0, }, Other: { minWidth: 600, maxWidth: Infinity, minHeight: 0, }, } });\n         */\n        function config(newConfig) {\n            if (!newConfig || !newConfig.breakpoints)\n                throw new Error('Astral.layout: Invalid configuration');\n            configuration = newConfig;\n            breakpointLabels = Object.keys(configuration.breakpoints).reduce((acc, key) => {\n                acc[key] = key;\n                return acc;\n            }, {});\n        }\n        layout.config = config;\n        /**\n         * Get window size\n         * @memberof! Astral.layout\n         * @public\n         * @example Astral.layout.getWindowSize();\n         * @example Astral.layout.getBreakpoint(Astral.layout.getWindowSize());\n         * @returns {WindowSize} Window size\n         */\n        function getWindowSize() {\n            return {\n                WIDTH: window.innerWidth,\n                HEIGHT: window.innerHeight,\n            };\n        }\n        layout.getWindowSize = getWindowSize;\n        /**\n         * Get breakpoint from label\n         * @param {String} breakpoint Breakpoint label\n         * @memberof! Astral.layout\n         * @public\n         * @example Astral.layout.getBreakpointFromLabel(Astral.layout.getBreakpointLabels().ExtraLarge);\n         * @returns {Breakpoint} Breakpoint\n         * @throws {Error} No breakpoint found for label: <breakpoint>\n         */\n        function getBreakpointFromLabel(breakpoint) {\n            const match = configuration.breakpoints[breakpoint];\n            if (match)\n                return match;\n            throw new Error('Astral.layout: No breakpoint found for label: ' + breakpoint);\n        }\n        layout.getBreakpointFromLabel = getBreakpointFromLabel;\n        /**\n         * Get breakpoint\n         * @param {WindowSize} screenSize Screen size\n         * @memberof! Astral.layout\n         * @public\n         * @example Astral.layout.getBreakpoint(Astral.layout.getWindowSize());\n         * @returns {Breakpoint} Breakpoint\n         * @throws {Error} No breakpoint found for screen size\n         */\n        function getBreakpoint(screenSize) {\n            for (const breakpoint in configuration.breakpoints) {\n                const resObj = configuration.breakpoints[breakpoint];\n                if (screenSize.WIDTH >= resObj.minWidth && screenSize.WIDTH <= resObj.maxWidth) {\n                    if (screenSize.HEIGHT >= resObj.minHeight) {\n                        return resObj;\n                    }\n                }\n            }\n            throw new Error('Astral.layout: No breakpoint found for screen size: ' + screenSize.WIDTH + 'x' + screenSize.HEIGHT);\n        }\n        layout.getBreakpoint = getBreakpoint;\n        /**\n         * Get orientation\n         * @memberof! Astral.layout\n         * @public\n         * @example Astral.layout.getOrientation();\n         * @returns {Orientation} Orientation\n         */\n        function getOrientation() {\n            try {\n                if (window.screen.orientation.type.match('portrait'))\n                    return 'portrait';\n                else if (window.screen.orientation.type.match('landscape'))\n                    return 'landscape';\n            }\n            catch (e) {\n                if (window.matchMedia) {\n                    const mql = window.matchMedia('(orientation: portrait)');\n                    if (mql && mql.matches) {\n                        return 'portrait';\n                    }\n                    else if (mql && !mql.matches) {\n                        return 'landscape';\n                    }\n                }\n                else {\n                    throw new Error(`Astral.layout: No orientation found.\\n${e}`);\n                }\n            }\n            throw new Error(`Astral.layout: No orientation found.`);\n        }\n        layout.getOrientation = getOrientation;\n        /**\n         * Apply callback if conditions are met\n         * @param {Function} callbackSuccess Callback to execute if conditions are met\n         * @param {Function} callbackFail Callback to execute if conditions are not met\n         * @param {Array} conditions Conditions to check\n         * @param {Boolean} areAllConditionsNecessary Are all conditions necessary to execute callbackSuccess\n         * @memberof! Astral.layout\n         * @public\n         * @example Astral.layout.applyIf(successCallback, failCallback, [ {breakpoint: Astral.layout.getBreakpointLabels().ExtraLarge, selector: \"<=\"}, {breakpoint: Astral.layout.getBreakpointLabels().Large, selector: \">=\"} ], true);\n         * @returns {void}\n         * @throws {Error} No conditions or callbackSuccess provided\n         * @throws {Error} No breakpoint found for screen size\n         * @example Astral.layout.applyIf(successCallback, failCallback, [ {breakpoint: Astral.layout.getBreakpointLabels().ExtraLarge, selector: \"<=\"}, {breakpoint: Astral.layout.getBreakpointLabels().Large, selector: \">=\"} ], true);\n         */\n        // TODO: we need to make this function more sophisticated\n        function applyIf(callbackSuccess, callbackFail, conditions, areAllConditionsNecessary) {\n            if (!conditions || conditions.length === 0 || !callbackSuccess)\n                throw new Error('Astral.layout: No conditions or callbackSuccess provided');\n            function _AstralJsMediaQuery() {\n                let isMatched = false;\n                for (let index = 0; index < conditions.length; index++) {\n                    const condition = conditions[index];\n                    let conditionMatched = false;\n                    if (typeof condition === 'object') {\n                        const matchedBreakpoint = getBreakpointFromLabel(condition.breakpoint);\n                        const windowSize = getWindowSize();\n                        switch (condition.selector) {\n                            case '<=':\n                                if (windowSize.WIDTH <= matchedBreakpoint.maxWidth)\n                                    conditionMatched = true;\n                                break;\n                            case '>=':\n                                if (windowSize.WIDTH >= matchedBreakpoint.minWidth)\n                                    conditionMatched = true;\n                                break;\n                            case '<':\n                                if (windowSize.WIDTH < matchedBreakpoint.maxWidth)\n                                    conditionMatched = true;\n                                break;\n                            case '>':\n                                if (windowSize.WIDTH > matchedBreakpoint.minWidth)\n                                    conditionMatched = true;\n                                break;\n                            case '=':\n                            default:\n                                if (windowSize.WIDTH >= matchedBreakpoint.minWidth &&\n                                    windowSize.WIDTH <= matchedBreakpoint.maxWidth &&\n                                    windowSize.HEIGHT >= matchedBreakpoint.minHeight)\n                                    conditionMatched = true;\n                                break;\n                        }\n                    }\n                    if (typeof condition === 'function') {\n                        conditionMatched = condition();\n                    }\n                    _debugLog(`Condition ${index} matched: ${conditionMatched}`);\n                    if (conditionMatched)\n                        isMatched = true;\n                    if (isMatched && areAllConditionsNecessary && conditionMatched) {\n                        isMatched = true;\n                    }\n                    if (isMatched && areAllConditionsNecessary && !conditionMatched) {\n                        isMatched = false;\n                    }\n                    if (areAllConditionsNecessary && !conditionMatched) {\n                        isMatched = false;\n                        break;\n                    }\n                    if (!areAllConditionsNecessary && conditionMatched) {\n                        isMatched = true;\n                        break;\n                    }\n                }\n                if (isMatched)\n                    callbackSuccess();\n                else\n                    callbackFail();\n            }\n            _resizeCallback(_AstralJsMediaQuery);\n            _orientationChangeCallback(_AstralJsMediaQuery);\n        }\n        layout.applyIf = applyIf;\n        /**\n         * Get breakpoint labels\n         * @memberof! Astral.layout\n         * @public\n         * @example Astral.layout.getBreakpointLabels();\n         * @example Astral.layout.getBreakpointLabels().ExtraLarge;\n         * @example Astral.layout.getBreakpointLabels().Large;\n         * @example Astral.layout.getBreakpointLabels().Medium;\n         * @example Astral.layout.getBreakpointLabels().Small;\n         * @example Astral.layout.getBreakpointLabels().ExtraSmall;\n         * @example Astral.layout.getBreakpointLabels().Other;\n         * @returns {getBreakpointLabels} Breakpoint labels\n         */\n        function getBreakpointLabels() {\n            return breakpointLabels;\n        }\n        layout.getBreakpointLabels = getBreakpointLabels;\n        /**\n         * Set debug mode\n         * @param {Boolean} value Debug mode\n         * @memberof! Astral.layout\n         * @public\n         * @example Astral.layout.setDebugMode(true);\n         * @returns {void}\n         */\n        function setDebugMode(value) {\n            debugMode = value;\n        }\n        layout.setDebugMode = setDebugMode;\n    })(layout = Astral.layout || (Astral.layout = {}));\n})(Astral || (Astral = {}));\nexport default Astral.layout;\n","import Event from './event';\nvar Astral;\n(function (Astral) {\n    var context;\n    (function (context) {\n        const store = {};\n        let _debugMode = false;\n        function _initState(key, val) {\n            store[key] = null;\n            _debugLog(`State: ${key}\\nValue: ${val}\\nAction: Initialized`);\n            updateState(key, val);\n        }\n        function _debugLog(msg) {\n            if (_debugMode)\n                console.debug('Astral.context $:', msg);\n        }\n        function _ListenerConstructor(key) {\n            return function (callback) {\n                Event.subscribe(`ASTRAL_CONTEXT_UPDATED_INTERNAL_${key}`, function (stateChangeObj) {\n                    callback.call(null, stateChangeObj.prevState, stateChangeObj.newState);\n                });\n            };\n        }\n        // Public API\n        /**\n         * @desc Get a state\n         * @name getState\n         * @param {String} key State key\n         * @public\n         * @memberof! Astral.context\n         * @example\n         * const [value, onchange] = Astral.context.getState(\"myState\");\n         * onchange(function(prevState, newState) { console.log(prevState, newState) });\n         * @returns {StateTuple}\n         */\n        function getState(key) {\n            if (typeof store[key] === 'undefined')\n                _initState(key, null);\n            const listener = _ListenerConstructor(key);\n            return [store[key], listener];\n        }\n        context.getState = getState;\n        /**\n         * @desc Update a state\n         * @name updateState\n         * @returns {void}\n         * @public\n         * @param {String|Object} key - The key of the state to update, or an object containing key-value pairs to update multiple states.\n         * @param {*} val - The value to update the state with (only applicable when key is a string).\n         * @memberof! Astral.context\n         * @example\n         * // Update a single state\n         * Astral.context.updateState(\"myState\", \"myValue\");\n         *\n         * // Update multiple states using an object\n         * Astral.context.updateState({\n         *   state1: value1,\n         *   state2: value2,\n         * });\n         */\n        function updateState(key, val) {\n            if (typeof key === 'object' && key !== null) {\n                for (const stateKey in key) {\n                    updateState(stateKey, key[stateKey]);\n                }\n                return;\n            }\n            if (typeof key === 'string') {\n                if (typeof store[key] === 'undefined') {\n                    _initState(key, null);\n                }\n                const prevState = store[key];\n                store[key] = val;\n                _debugLog(`State: ${key}\\nValue: ${val}\\nAction: Updated`);\n                Event.publish(`ASTRAL_CONTEXT_UPDATED_INTERNAL_${key}`, {\n                    prevState: prevState,\n                    newState: store[key],\n                });\n            }\n        }\n        context.updateState = updateState;\n        /**\n         * @desc Set debug mode\n         * @name setDebugMode\n         * @returns {void}\n         * @public\n         * @param {Boolean} mode\n         * @memberof! Astral.context\n         * @example Astral.context.setDebugMode(true);\n         * @example Astral.context.setDebugMode(false);\n         */\n        function setDebugMode(mode) {\n            _debugMode = mode;\n        }\n        context.setDebugMode = setDebugMode;\n    })(context = Astral.context || (Astral.context = {}));\n})(Astral || (Astral = {}));\nexport default Astral.context;\n","import Event from './event';\nimport Layout from './layout';\nimport Context from './context';\nvar Astral;\n(function (Astral) {\n    Astral.event = Event, Astral.layout = Layout, Astral.context = Context;\n})(Astral || (Astral = {}));\nexport const event = Event, layout = Layout, context = Context;\nexport default Astral;\n"],"names":["root","factory","exports","module","define","amd","self","Astral","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","event","_eventSubscribers","_debugMode","_removeFromArray","array","element","index","indexOf","splice","_debugLog","msg","console","debug","subscribe","eventName","callback","Array","isArray","push","publish","data","forEach","JSON","stringify","unsubscribe","i","length","unsubscribeAll","setDebugMode","debugMode","layout","DEFAULT_BREAKPOINT_LABELS","ExtraLarge","Large","Medium","Small","ExtraSmall","Other","configuration","breakpoints","minWidth","maxWidth","Infinity","minHeight","breakpointLabels","ASTRAL_LAYOUT_EVENTS","_publishResizeEvents","getBreakpoint","getWindowSize","_publishOrientationChangeEvents","orientation","getOrientation","WIDTH","window","innerWidth","HEIGHT","innerHeight","getBreakpointFromLabel","breakpoint","match","Error","screenSize","resObj","screen","type","e","matchMedia","mql","matches","addEventListener","addListener","config","newConfig","keys","reduce","acc","applyIf","callbackSuccess","callbackFail","conditions","areAllConditionsNecessary","_AstralJsMediaQuery","isMatched","condition","conditionMatched","matchedBreakpoint","windowSize","selector","message","_orientationChangeCallback","getBreakpointLabels","context","store","_initState","val","updateState","prevState","newState","stateKey","getState","listener","stateChangeObj","_ListenerConstructor","mode"],"sourceRoot":""}